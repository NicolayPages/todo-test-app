{"version":3,"file":"static/js/985.06d5563c.chunk.js","mappings":"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","sources":["webpack://todo-test-app/./src/components/Paginator/Paginator.module.scss?ffc2","components/Paginator/Paginator.tsx","webpack://todo-test-app/./src/components/Preloader/Preloader.module.scss?da84","components/Preloader/Preloader.tsx","selectors/todo-selectors.ts","webpack://todo-test-app/./src/pages/Todo/Todo.module.scss?e863","pages/Todo/Form.tsx","pages/Todo/Task.tsx","pages/Todo/Todo.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__vHhUQ\",\"list\":\"Paginator_list__8iJcf\",\"selected\":\"Paginator_selected__hXoql\",\"pagBtn\":\"Paginator_pagBtn__AFOdF\"};","import React, { useState } from 'react';\r\nimport s from './Paginator.module.scss'\r\n\r\n\r\ntype PropsType = {\r\n   totalCount: number\r\n   pageSize: number\r\n   currentPage: number\r\n   onPageChanged: (p: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = React.memo((props) => {\r\n   let pagesCount = Math.ceil(props.totalCount / props.pageSize);\r\n   let pages = [];\r\n   for (let i = 1; i <= pagesCount; i++) {\r\n      pages.push(i);\r\n   };\r\n\r\n   let portionSize = props.pageSize;\r\n   let portionCount = Math.ceil(props.totalCount / portionSize);\r\n\r\n   let [portionNumber, setPortionNumber] = useState(1);\r\n   let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n   let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n   let pagination = pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\r\n      return <li key={p} onClick={(e) => { props.onPageChanged(p) }} className={props.currentPage === p ? s.selected : s.g}>{p}</li>\r\n   });\r\n\r\n   return (\r\n      <div className={s.paginator}>\r\n         {portionNumber > 1 &&\r\n            <button className={s.pagBtn} onClick={() => (setPortionNumber(portionNumber - 1))}>prev</button>}\r\n         <ul className={s.list}>{pagination}</ul>\r\n         {portionCount > portionNumber * props.pageSize &&\r\n            <button className={s.pagBtn} onClick={() => (setPortionNumber(portionNumber + 1))}>next</button>}\r\n      </div>\r\n   );\r\n})\r\n\r\nexport default Paginator;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"ldsDualRing\":\"Preloader_ldsDualRing__XAzgT\",\"wrapper\":\"Preloader_wrapper__MbbJv\"};","import React from 'react';\r\nimport s from './Preloader.module.scss';\r\n\r\n\r\nconst Preloader: React.FC = React.memo(() => {\r\n   return (\r\n      <div className={s.wrapper}>\r\n         <div className={s.ldsDualRing}></div>\r\n      </div>\r\n   );\r\n})\r\n\r\nexport default Preloader;","import { AppStateType } from \"../redux/redux\";\r\n\r\nexport const getTasks = (state: AppStateType) => {\r\n   return state.todo.tasks\r\n};\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.todo.isFetching\r\n};\r\nexport const getLimit = (state: AppStateType) => {\r\n   return state.todo.limit\r\n};\r\nexport const getTotalCount = (state: AppStateType) => {\r\n   return state.todo.totalCount\r\n};\r\nexport const getPage = (state: AppStateType) => {\r\n   return state.todo.page\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Todo_wrapper__FgqDd\",\"title\":\"Todo_title__7Psa4\",\"form\":\"Todo_form__LJu4u\",\"input\":\"Todo_input__WkEXh\",\"btn\":\"Todo_btn__Kwttw\",\"completed\":\"Todo_completed__kVIx5\",\"task\":\"Todo_task__vMKZr\",\"description\":\"Todo_description__zup9r\",\"number\":\"Todo_number__Jykf8\",\"actions\":\"Todo_actions__YYHRv\",\"list\":\"Todo_list__l3kAR\",\"editInput\":\"Todo_editInput__jWf+A\"};","import * as React from 'react';\r\nimport { ChangeEvent, FormEvent, useState } from 'react';\r\nimport s from './Todo.module.scss';\r\n\r\n\r\ntype PropsType = {\r\n   addTask: (value: string) => void\r\n}\r\n\r\nexport const Form: React.FC<PropsType> = React.memo(({ addTask }) => {\r\n\r\n   let [value, setValue] = useState('')\r\n   let onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setValue(e.target.value)\r\n   }\r\n   let setTaskValue = (e: FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault()\r\n      addTask(value)\r\n      setValue('')\r\n   }\r\n\r\n   return (\r\n      <form onSubmit={setTaskValue} className={s.form}>\r\n         <input\r\n            onChange={onChange}\r\n            value={value}\r\n            className={s.input}\r\n            type=\"text\"\r\n            placeholder='write your tasks...'\r\n         />\r\n         <button disabled={!value} className={s.btn}>add task</button>\r\n      </form>\r\n   )\r\n})","import * as React from 'react';\r\nimport { ChangeEvent, useState } from 'react';\r\nimport changeIcon from '../../assets/images/change.png';\r\nimport completeIcon from '../../assets/images/complete.png';\r\nimport deleteIcon from '../../assets/images/delete.png';\r\nimport s from './Todo.module.scss';\r\n\r\ntype PropsType = {\r\n   title: string\r\n   completed: boolean\r\n   id: number\r\n   deleteTask: (id: number) => void\r\n   completeTask: (id: number) => void\r\n   changeTask: (id: number, value: string) => void\r\n}\r\n\r\nexport const Task: React.FC<PropsType> = React.memo((props) => {\r\n\r\n   const { title, id, completed, deleteTask, completeTask, changeTask } = props\r\n\r\n   let [editMode, setEditMode] = useState(false)\r\n   let [value, setValue] = useState(title)\r\n\r\n   const taskClasses = [s.task]\r\n\r\n\r\n   let editTaskValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setValue(e.target.value)\r\n   }\r\n   let onEditMode = () => {\r\n      setEditMode(true)\r\n   }\r\n   let onChangeTask = () => {\r\n      setEditMode(false)\r\n      changeTask(id, value)\r\n   }\r\n   let onDeleteTask = () => {\r\n      deleteTask(id)\r\n   }\r\n   let onCompleteTask = () => {\r\n      completeTask(id)\r\n   }\r\n\r\n   if (completed) {\r\n      taskClasses.push(s.completed);\r\n   }\r\n\r\n   return (\r\n      <div className={taskClasses.join(' ')}>\r\n         <div className={s.description}>\r\n            <span className={s.number}>{id}.</span>\r\n            {editMode\r\n               ? <input\r\n                  className={s.editInput}\r\n                  autoFocus\r\n                  type=\"text\"\r\n                  onChange={editTaskValue}\r\n                  onBlur={onChangeTask}\r\n                  value={value}\r\n               />\r\n               : <p className={s.text}>{title}</p>\r\n            }\r\n         </div>\r\n         <div className={s.actions}>\r\n            {!completed &&\r\n               <button onClick={onEditMode} className={s.btn}>\r\n                  <img src={changeIcon} alt=\"change\" />\r\n               </button>}\r\n            {!completed &&\r\n               <button onClick={onCompleteTask} className={s.btn}>\r\n                  <img src={completeIcon} alt=\"complete\" />\r\n               </button>}\r\n            <button onClick={onDeleteTask} className={s.btn}>\r\n               <img src={deleteIcon} alt=\"delete\" />\r\n            </button>\r\n         </div>\r\n      </div >\r\n   )\r\n})","import * as React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Paginator from '../../components/Paginator/Paginator';\r\nimport Preloader from '../../components/Preloader/Preloader';\r\nimport { addTask, changeTask, completeTask, deleteTask, requestTasks } from '../../redux/reducers/todo-reducer';\r\nimport { getIsFetching, getLimit, getPage, getTasks, getTotalCount } from '../../selectors/todo-selectors';\r\nimport { TaskType } from '../../types/types';\r\nimport { Form } from './Form';\r\nimport { Task } from './Task';\r\nimport s from './Todo.module.scss';\r\n\r\n\r\n\r\n\r\nconst Todo: React.FC = React.memo(() => {\r\n\r\n   const tasks = useSelector(getTasks)\r\n   const isFetching = useSelector(getIsFetching)\r\n   const page = useSelector(getPage)\r\n   const limit = useSelector(getLimit)\r\n   const totalCount = useSelector(getTotalCount)\r\n   let dispatch = useDispatch()\r\n\r\n   useEffect(() => {\r\n      if (tasks.length == 0) {\r\n         dispatch(requestTasks(page, limit))\r\n      }\r\n   }, []);\r\n\r\n\r\n   let onPageChanged = (page: number) => {\r\n      dispatch(requestTasks(page, limit))\r\n   }\r\n   let onAddTask = (taskTitle: string) => {\r\n      let task = {\r\n         userId: 1,\r\n         id: tasks.length + 1,\r\n         title: taskTitle,\r\n         completed: false\r\n      }\r\n      dispatch(addTask(task))\r\n   }\r\n   let onDeleteTask = (taskId: number) => {\r\n      dispatch(deleteTask(taskId))\r\n   }\r\n   let onChangeTask = (taskId: number, newValue: string) => {\r\n      dispatch(changeTask(taskId, newValue))\r\n   }\r\n   let onCompleteTask = (taskId: number) => {\r\n      dispatch(completeTask(taskId, true))\r\n   }\r\n\r\n   let tasksList = tasks.map((t: TaskType) =>\r\n      <Task\r\n         key={t.id} title={t.title}\r\n         id={t.id} completed={t.completed}\r\n         deleteTask={onDeleteTask}\r\n         completeTask={onCompleteTask}\r\n         changeTask={onChangeTask}\r\n      />)\r\n\r\n   return (\r\n      <div className={s.wrapper}>\r\n         <h1 className={s.title}>ToDo List</h1>\r\n         <Form addTask={onAddTask} />\r\n         <div className={s.list}>\r\n            {isFetching ? < Preloader /> : tasksList}\r\n         </div>\r\n         <Paginator\r\n            totalCount={totalCount}\r\n            pageSize={10}\r\n            currentPage={page}\r\n            onPageChanged={onPageChanged}\r\n         />\r\n      </div>\r\n   )\r\n})\r\n\r\n\r\n\r\nexport default Todo"],"names":["React","props","pagesCount","Math","ceil","totalCount","pageSize","pages","i","push","portionSize","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","filter","p","map","onClick","e","onPageChanged","className","currentPage","s","getTasks","state","todo","tasks","getIsFetching","isFetching","getLimit","limit","getTotalCount","getPage","page","Form","addTask","value","setValue","onSubmit","preventDefault","onChange","target","type","placeholder","disabled","Task","title","id","completed","deleteTask","completeTask","changeTask","editMode","setEditMode","taskClasses","join","autoFocus","onBlur","src","changeIcon","alt","completeIcon","deleteIcon","useSelector","dispatch","useDispatch","useEffect","length","requestTasks","onDeleteTask","taskId","onChangeTask","newValue","onCompleteTask","tasksList","t","taskTitle","task","userId"],"sourceRoot":""}